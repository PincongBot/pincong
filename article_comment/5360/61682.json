{"type":"article_comment","id":61682,"parentType":"article","parentId":5360,"uid":11707,"contents":"我之前在https://pincong.rocks/article/5059 提出过类似的建议，我觉得我有义务也贡献一点思路。<br>\n<br>\n*************************************************************<br>\n<br>\nsecond-price auction主要的侧重点在revelation principle，大家直接填写true underlying valuation就可，不需要去consider interactive game。在ranking上来说，我认为是不是truth-telling对ranking来说并不是重要的，而且在匿名网络上也没有必要。不过如果你认为truth-telling对ranking有用，那么也许你可以看看VCG mechanisms，我记得好像这个second-price auction是VCG mechanisms在auction中的一个例子；看看是否能从中找出更适合ranking的direct mechanism。<br>\n<br>\n*************************************************************<br>\n<br>\n如果你的目的是每个ID来到Pincong都能多点击，多看到他/她感兴趣的文章，那么personalized recommendation更好 （就是像 @经略 所提出的）。但是personalized recommendation在pincong上有三个问题： 第一，计算资源要求太大，不是几十台服务器能解决的。第二，数据量要求高，如果没有对每个ID的大数据量，那么推荐的帖子的点击率也不会很高。第三，会造成读者不能接触她/他以前没有接触过的文章类型(比如因为我最关注“反送中”，系统会一直推荐“反送中”的帖子给我，而不会把“学院”的帖子推给我)。<br>\n<br>\n*************************************************************<br>\n<br>\n如果你的目的不是点击率，而是让一些高质量的文章能被ID读到，那么对现有文章进行全局ranking就好。比如google的 markov chain方法就是一个比较成熟的algorithm，pagerank论文网上就能找到（但是training的时间比较长），如果有人专精algorithm，那么实现和维护(updates)不是太难。如果没有专门做algorithm的，我推荐用比较简单易懂的的multi-layer scores来进行ranking。<br>\n<br>\n1. 比如先由各个管理员先提出几个categories 和 measures，对每个category用加权的方法计算score。<br>\n<br>\n比如对于正文这个category来说measures可以是：长短，原创，ID 是否Thinker，views, up votes, down votes, etc. 举个例子，长短（&lt;500字： 0 point; &lt;=5，000字： 1 point； &gt;5，000字: 0 point）；原创（是原创:1 point）；ID （从前发表高质量的帖子有 Thinker的tage： 1 point）；等等。当然，对每个measure的值也可以先进行scale以后（比如，对阅读量views这个measure可以进行log操作，以降低过高的阅读量对score的影响）。对up votes和down votes的score最好是asymmetric的，up votes更重要。然后对这些measure进行加权平均算出来一个Score_1，每个measure前的系数权重需要training以optimize。<br>\n<br>\n另外 @小二8964 主贴中提到的用声望作为一个measure我有异议，高声望的ID并不一定是带来高质量的讨论和发言，在pincong真诚交流思想码字带来的声望提高从效率上来说比用灌水和政治正确的发言带来的提高要底很多很多（当然，有一些高声望的ID还是很有逻辑和思想的，对我也很有启发，但是这种高声望ID和灌水的高声望ID在pincong一半一半吧）；也许给与有可能带来优质发言的ID以Thinker的tag更能帮助identify好的帖子。<br>\n<br>\n接下来对于回帖这个category来说也可以有一些measures：比如 长短，回帖ID， views, up votes, down votes等。然后把这些东西的score和之前的Score_1在进行加权算出Score_2。<br>\n<br>\n然后再考虑其他的categories，从而算出Score_3, Score_4，...，Score_N。<br>\n<br>\n2. 然后需要考虑发帖时间，比如帖子是k小时前发的帖子，那么时间越长，我们需要对它下降权重，比如用exponential的方法把Score_N乘以E^(-alpha*k)，其中alpha是一个parameter，需要进行training调整。这样，我们对每个帖子都有了一个score，比如叫Score_Raw。<br>\n<br>\n3. 最后在display在前十的帖子在主页的时候，需要再进行一次加权Score_Raw以平衡前十帖子的内容（e.g.,如果前十帖子的主题都是“反送中”，那么“反送中”是over exposed，所以所有“反送中”帖子应该被score down，使得其他主题的帖子能在前十也有机会出现）。直接设hard limit（比如同主题帖子&lt;4）可以，或者使用权重也行（e.g.， 所有主题帖子总数 - “反送中”主题帖子总数）/ 所有主题帖子总数）<br>\n<br>\n这些计算和display可以每几个小时更新一次，以降低服务器的负担。计算的时候不需要把所有的帖子都重新计算，只要对这几个小时内出现的新文章和回复进行更新即可，以降低服务器负担。<br>\n<br>\n4. 另外，在前十的“热帖”，以外，最好还要用multi armed bandit的方法推荐一些暂时score比较低但是很有potential的帖子，能让大家不断找到好的topic讨论，进行diversify。<br>\n<br>\n最后，如果真的要讨论algorithm，那么不用直接把参数和权重解释给大众，不然很容易被abuse，连google也有这个困扰。管理员私信决定就好。","date":"2019-09-24","agreeCount":0,"discussionCount":0}