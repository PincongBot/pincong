{"type":"article_comment","id":300511,"parentType":"article","parentId":5850,"uid":18160,"contents":"BoringSSL代码<br>\n密钥交换<br>\n代码路径boringssl\\crypto\\evp\\evp_ctx.c<br>\n&nbsp; &nbsp; &amp;rsa_pkey_meth,<br>\n&nbsp; &nbsp; &amp;ec_pkey_meth,<br>\n&nbsp; &nbsp; &amp;ed25519_pkey_meth,<br>\n&nbsp; &nbsp; &amp;x25519_pkey_meth,<br>\n我这里讲的是ec_pkey_meth，为什么？<br>\n==========抄袭 begin============<br>\nCurve25519 是目前最高水平的 Diffie-Hellman函数，适用于广泛的场景，由Daniel J. Bernstein教授设计。<b>由于NIST P-256的设计过程不透明，有来历不明的参数，被广泛怀疑有后门</b>，所以设计了Curve25519，Curve25519的设计过程完全公开，没有任何来历不明的参数。 部署情况：http://ianix.com/pub/curve25519-deployment.html<br>\n<br>\nEd25519是一个数字签名算法，签名和验证的性能都极高， 一个4核2.4GHz 的 Westmere cpu，每秒可以验证 71000 个签名，<b>安全性极高，等价于RSA约3000-bit。签名过程不依赖随机数生成器，不依赖hash函数的防碰撞性，没有时间通道攻击的问题，并且签名很小，只有64字节，公钥也很小，只有32字节。</b> 部署情 况：http://ianix.com/pub/ed25519-deployment.html<br>\n==========抄袭 end=============<br>\n我拿到的Google证书，是<b>NIST P-256</b>,故我讲解第二个。。。同理你们可以去看RSA的<br>\n<br>\n我们重点看这个代码文件 boringssl\\crypto\\evp\\p_ec.c，自学的同学麻烦自己看对应的c文件<br>\n例如rsa，看p_rsa.c。<br>\n<br>\n從EVP_PKEY_keygen這個函數開始看起。得到了pkey，寫到證書裏，把證書發給客戶端。<br>\nEVP_PKEY_keygen會調用對應的keygen函數指針，這裏指向了pkey_ec_keygen<br>\n<br>\n<br>\n先寫到這裏。。。明天繼續","date":"2020-03-17","agreeCount":3,"discussionCount":0}