{"type":"article","id":22434,"title":"关于大学选课系统高并发问题的简单思考","uid":18160,"topics":[10290,10291],"contents":"大学选课系统，设计存在大量问题<br>\n在高并发的时候，必然导致选课困难<br>\n故优化如下<br>\n<br>\n1.节省网络带宽<br>\n2.节省磁盘IO<br>\n3.提高CPU利用率<br>\n<br>\n如何节省网络带宽<br>\n现有代码，每次http请求返回的都是<b>完整的html报文</b>，非常占用网络带宽<br>\n修改为前后端分离，每次返回增量的json报文，可以大幅提升带宽利用率<br>\n举个例子，原来是每次交互都要返回20k的html报文，现在只需要返回2K的json，提升了10倍的容量<br>\n<br>\n第二步，通过cloudflare提供的<a href=\"https://github.com/cloudflare/ngx_brotli_module\" rel=\"nofollow noreferrer noopener\" target=\"_blank\">ngx_brotli_module</a>对数据压缩传输，进一步提升带宽利用率<br>\n假设学校使用的是6类网线+千兆交换机<br>\n那么上行带宽按1000Mbps计算<br>\n每次请求占用了2kb流量,那么理论上足以抗住5万的并发<br>\n学校学生按15万人算，基本满足需求了【超过15万人学生的大学，就应该拆分！】<br>\n<br>\n如何节省磁盘IO<br>\n首先对于热点数据，用redis做缓存，数据都从内存走，而不是直接访问数据库<br>\nredis的数据应该保存 【key = 课程的id，value = 还剩多少名额】，服务每次从redis读取和更新名额数据，而不是数据库。<br>\n另外，课程id和课程名字，导师名字，学分，等不会改变的数据，应该在服务启动的时候，内存里建好结构化，数据直接在内存里读取，而不是从数据库读取<br>\n这样，可以大幅降低对数据库的IO消耗<br>\n简单讲，如果是固定的数据，就内存里存好。如果是会变动的数据，就用redis存。尽量减少对数据库的磁盘IO。<br>\n<br>\n第二步，用update代替insert<br>\n正常选课代码，应该是学生选好课程以后，往数据库执行insert操作，让数据库记录学生选了什么课程<br>\n因为高并发的情况下，insert太多，磁盘io消耗非常大<br>\n所以用更省io的update<br>\n具体如下<br>\n在选课开始前几天，就批量往数据库insert好所有学生的选课记录，不过都是空记录<br>\n在选课的时候，只要执行update就可以了！<br>\n这可以高效提升数据库的IO，有3倍提升的效果！<br>\n<br>\n最后是对数据库分库分表<br>\n我建议，5万的并发下去update数据库压力还是太大了<br>\n建议用两个数据库服务器<br>\n每个数据库服务器负责2个学年的学生<br>\n比如数据库A服务 2020/2019两个年级，<br>\n数据库B负责2018/2017 两个学年的学生<br>\n这样，每个数据库只需要负责2.5万的并发请求【如果还是扛不住，就一个学年一个数据库，分4个】<br>\n<br>\n<br>\n如何提高CPU利用率<br>\n<br>\n前后端分离，所以数据都是json<br>\n为了提升json的处理效率，使用simdjson<br>\n可以在json的处理上，提升10倍的速度<br>\n<br>\n<br>\n<br>\n先想到这么多<br>\n想到其他的继续优化","date":"2020-08-02","agreeCount":3,"discussionCount":0}