{"type":"video_comment","id":15550,"parentType":"video","parentId":1618,"uid":18160,"contents":"想了想，v2ray的确太大了！<br>\n<br>\n不过自己直接用meek改来用。<br>\n<br>\nPC端：直接用meek-client.exe 就好了<br>\n<br>\n服务端：修改meek-server程序，把tor那部分，改成geph-exit那部分，就可以用了~<br>\n<pre><br>\n\t\t\tcase \"proxy\":<br>\n\t\t\t\tif len(command) &lt; 1 {<br>\n\t\t\t\t\treturn<br>\n\t\t\t\t}<br>\n\t\t\t\trlp.Encode(soxclient, true)<br>\n\t\t\t\tdialStart := time.Now()<br>\n\t\t\t\thost := command[1]<br>\n\t\t\t\tvar remote net.Conn<br>\n\t\t\t\tfor _, ntype := range []string{\"tcp6\", \"tcp4\"} {<br>\n\t\t\t\t\ttcpAddr, err := net.ResolveTCPAddr(ntype, host)<br>\n\t\t\t\t\tif err != nil || isBlack(tcpAddr) {<br>\n\t\t\t\t\t\tcontinue<br>\n\t\t\t\t\t}<br>\n\t\t\t\t\tremote, err = net.DialTimeout(ntype, tcpAddr.String(), time.Second*30)<br>\n\t\t\t\t\tif err != nil {<br>\n\t\t\t\t\t\tcontinue<br>\n\t\t\t\t\t}<br>\n\t\t\t\t\tbreak<br>\n\t\t\t\t}<br>\n\t\t\t\tif remote == nil {<br>\n\t\t\t\t\treturn<br>\n\t\t\t\t}<br>\n\t\t\t\tatomic.AddUint64(&amp;tunnCount, 1)<br>\n\t\t\t\tdefer atomic.AddUint64(&amp;tunnCount, ^uint64(0))<br>\n\t\t\t\t// measure dial latency<br>\n\t\t\t\tdialLatency := time.Since(dialStart)<br>\n\t\t\t\tif statClient != nil &amp;&amp; singleHop == \"\" &amp;&amp; reportRL.Allow() {<br>\n\t\t\t\t\tstatClient.Timing(hostname+\".dialLatency\", dialLatency.Milliseconds())<br>\n\t\t\t\t}<br>\n\t\t\t\tdefer remote.Close()<br>\n\t\t\t\tonPacket := func(l int) {<br>\n\t\t\t\t\tif statClient != nil &amp;&amp; singleHop == \"\" {<br>\n\t\t\t\t\t\tbefore := atomic.LoadUint64(&amp;counter)<br>\n\t\t\t\t\t\tatomic.AddUint64(&amp;counter, uint64(l))<br>\n\t\t\t\t\t\tafter := atomic.LoadUint64(&amp;counter)<br>\n\t\t\t\t\t\tif before/1000000 != after/1000000 {<br>\n\t\t\t\t\t\t\tstatClient.Increment(hostname + \".transferMB\")<br>\n\t\t\t\t\t\t}<br>\n\t\t\t\t\t}<br>\n\t\t\t\t}<br>\n\t\t\t\tgo func() {<br>\n\t\t\t\t\tdefer remote.Close()<br>\n\t\t\t\t\tdefer soxclient.Close()<br>\n\t\t\t\t\tcwl.CopyWithLimit(remote, soxclient, limiter, onPacket, timeout)<br>\n\t\t\t\t}()<br>\n\t\t\t\tcwl.CopyWithLimit(soxclient, remote, limiter, onPacket, timeout)<br>\n</pre><br>\n<br>\n迷雾通的geph-exit 表示出口节点的代码实现。<br>\n<br>\n我还在看bridge的实现，了解中间都发生了什么。","date":"2020-04-12","agreeCount":3,"discussionCount":0}