{"type":"video_comment","id":18541,"parentType":"video","parentId":1892,"uid":18160,"contents":"在GitHub上看到一个开源项目<br>\nhttps://github.com/cloudflare/boringtun<br>\n<br>\n我已经看完了<br>\n<br>\nLinux的内核实现了内核态的wireguard<br>\n这个是cloudflare实现的用户态的wireguard<br>\n<br>\n使用了Rust语言<br>\n<br>\n重点看 <br>\ndevice目录： 模拟虚拟网卡<br>\nnoise目录：&nbsp; 网络通信协议<br>\n<br>\ndevice目录下，只用看 <b>tun_linux.rs</b> 就可以了！精华！<br>\n这个文件，注意<br>\nopen(b\"/dev/net/tun\\0\".as_ptr() as _, O_RDWR)<br>\n这行是关键代码<br>\n<br>\nifru_flags: (IFF_TUN | IFF_NO_PI | IFF_MULTI_QUEUE) as _,<br>\n<br>\n第二层关键<br>\nIFF_TUN 表示工作在 网络层 【IFF_TAP】 表示工作在数据链路层<br>\nIFF_MULTI_QUEUE 为了多队列访问，提升性能<br>\n其他的epoll kqueue 就是为了这个<br>\nepoll为了linux系统，kqueue为了mac系统<br>\n我们可以使用libevent代替<br>\n<br>\n<br>\n现在看noise，也就是重点wireguard的网络协议<br>\n重点看 <b>handshake.rs</b> 这个文件，<b>mod.rs</b> 这个文件<br>\n其中 handshake 里实现了握手协议<br>\nformat_handshake_initiation 这个函数负责拼 handshake_initiation 报文<br>\n就是拼字符串，根据协议实现。。。【对应 TLS 里的 ClientHello】<br>\n<br>\nformat_handshake_response 这个函数负责拼 handshake_response 报文<br>\n也是拼字符串，根据协议实现。。。【对应TLS 里的 ServerHello】<br>\n<br>\n拼字符串，我觉得是一个很机械的工作，我就没有细看，反正也就那么回事。。。<br>\n<br>\n至于 noise 下的mod.rs<br>\n我推荐 只看<br>\nencapsulate 和 decapsulate 两个函数<br>\n分别是把 /dev/net/tun读取的buffer 封装为 wireguard协议<br>\n和 根据wireguard协议，解析为buffer 回写到 tun虚拟网卡<br>\n<br>\n关键函数，我都已经给出了，你们只要看看哪些代码会调用<br>\n我说的这些函数，就可以对整个客户端有所了解！","date":"2020-05-10","agreeCount":0,"discussionCount":0}