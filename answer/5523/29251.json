{"type":"answer","id":29251,"parentType":"question","parentId":5523,"uid":6856,"contents":"基本上你能见到的，只要是免费的，或多或少都有问题。<br>\n要记住，<b>天下没有免费的午餐</b>，<b>免费的就是最贵的</b>。<br>\n<br>\n大概的问题还是一样的，你的流量出口那一跳你根本无法控制，<b>无论是什么代理或者VPN，而控制了出口节点也就控制了流量。</b><br>\n<br>\n<b>VPN服务器、VPN服务器所处局域网、VPN服务器的ISP、骨干网、服务器所在机房......等等等</b><br>\n<b>以上，这些都是你控制不了的。</b><br>\n<br>\n<br>\n<b>甚至很多时候，你连你本端设备都控制不了，换句话说，你的VPN客户端软件你都控制不了。</b><br>\n有时加密算法的安全性不用担心，但软件本身的行为就值得注意了，毕竟代码也不是你写的。<br>\n<br>\n<br>\n来看下面的例子，<br>\n说一说日本筑波大学的这个开源项目vpngate，部分关键源码片段：<br>\n<pre>UINT DCRegister() {<br>\n\tPackAddInt(req, &quot;build&quot;, build);<br>\n\tPackAddInt(req, &quot;osinfo&quot;, GetOsInfo()-&gt;OsType);<br>\n\tPackAddInt(req, &quot;is_64bit&quot;, Is64());<br>\n#ifdef\tOS_WIN32<br>\n\tPackAddInt(req, &quot;is_windows_64bit&quot;, MsIs64BitWindows());<br>\n#endif<br>\n\tPackAddStr(req, &quot;machine_key&quot;, machine_key_str);<br>\n\tPackAddStr(req, &quot;machine_name&quot;, machine_name);<br>\n\tPackAddInt(req, &quot;lasterror_ipv4&quot;, c-&gt;Err_IPv4_GetMyIp);<br>\n\tPackAddInt(req, &quot;lasterror_ipv6&quot;, c-&gt;Err_IPv6_GetMyIp);<br>\n\tPackAddBool(req, &quot;use_azure&quot;, use_azure);<br>\n\tPackAddStr(req, &quot;product_str&quot;, CEDAR_PRODUCT_STR);<br>\n\tPackAddInt(req, &quot;ddns_protocol_version&quot;, DDNS_VERSION);<br>\n}</pre><br>\nvpngate的DDNS默认是开启的，并且使用界面没有提供关闭途径<br>\n<br>\n换句话说当你新安装，服务器新部署，必然会向DDNS提供商提供信息<br>\n<b>在中国大陆，DDNS提交的域是sedns.cn，其他地区域是softether.net</b><br>\n<b>为什么大陆的不向softether.net注册，而要向sedns.cn提交注册信息？</b><br>\n<b>是不是很像各种游戏的国服和国际服？</b><br>\n<b>这样做的原因自己用脚后跟也能想到为什么。</b><br>\n<br>\n<b>会提交什么信息呢？</b><br>\n<b>看到machine_key_str、machine_name，你能想到什么？</b><br>\n<b>你的MAC和IP能逃得掉么？</b><br>\n<br>\n这只是源码中的冰山一角，其他地方还有什么，是不是留了后门加了料，我什么都不知道。<br>\n<br>\n相比之下，这款还算是免费的VPN里稍微“良心”一点的了。","date":"2019-07-12","agreeCount":4,"discussionCount":0}